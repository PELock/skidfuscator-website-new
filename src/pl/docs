## Outliner

Konturowanie odnosi się do procesu wyodrębniania kodu z metody i umieszczania go w oddzielnej, samodzielnej metodzie. Jest to często sposób na poprawę czytelności i łatwości konserwacji kodu, ponieważ może ułatwić zrozumienie, co robi metoda, dzieląc ją na mniejsze, bardziej skoncentrowane fragmenty kodu.

Konturowanie może być również wykorzystywane jako forma zaciemniania kodu, ponieważ może utrudnić komuś, kto próbuje zrozumieć kod, zobaczenie ogólnej struktury programu. Rozbijając kod na mniejsze części i rozdzielając go na różne metody, ktoś może być znacznie trudniejszy do zrozumienia relacji między różnymi częściami przepływu i tego, jak pasują do siebie, aby wykonać określoną funkcję.

![Outlining graph explanation](https://i.imgur.com/2HMq0a4.png)

Fantastyczną rzeczą w outliningu jest to, że nie jest on *technicznie* odwracalny! Aby móc powrócić do pierwotnego stanu dobrego zaciemnienia kodu, deobfuscator *musi wykonać inlining*. Co więcej, wymaga to od deobfuscatora manipulowania zmiennymi i innymi wrażliwymi formami manipulacji kodem bajtowym, co może prowadzić do awarii.

Ogólnie rzecz biorąc, outlining jest całkiem fajny :)

::: warning
Transformer jest wciąż na bardzo wczesnym etapie rozwoju. Ze względu na sposób działania weryfikatora Java, nie wszystkie scenariusze mogą zostać poprawnie zweryfikowane, co może prowadzić do pewnych problemów z kompilacją. Używaj na własne ryzyko, a jeśli pojawią się jakiekolwiek problemy, zgłoś je.

Note to self: I hate stack frames
:::

## Konfiguracja

```js
outliner {
     enabled: true
     exempt: []
}
```

## Przykłady

#### Brak zaciemnienia

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Zaciemniony kod
```java
public static void main(String[] args) {
    step1_AF8FZE8EF7Z89F();
    /*[...]*/
}

static void step1_AF8FZE8EF7Z89F() {
    int number = callNumber();
}


static int callNumber() {
    return 1;
}
```


