# Wprowadzenie do obfuskacji w Java

Dla tych, którzy są nowicjuszami w obfuskacji java, aby uzyskać podstawowy wgląd w to, jak może działać obfuskacja java, zalecamy przeczytanie poniższego prostego przewodnika. Bardziej skomplikowane dyskusje można znaleźć na naszym blogu tutaj https://blog.skidfuscator.dev.

## Czym jest zaciemnianie Java?
Zaciemnienie jest procesem utrudniającym zrozumienie czegoś. Jest on często wykorzystywany do ochrony przed nieuprawnionym dostępem i użyciem; Zaciemnianie może być wykorzystywane do ukrywania poufnych informacji, takich jak hasła, przed łatwym pozyskaniem przez hakerów lub inne złośliwe podmioty. Służy również do ochrony oprogramowania przed inżynierią wsteczną, która może być wykorzystywana do odkrywania sposobu działania zastrzeżonego oprogramowania i tworzenia konkurencyjnych produktów.

### Ostrożność
W kontekście zaciemniania Java, zaciemnianie służy do ochrony bazy kodu aplikacji Java przed ujawnieniem, skopiowaniem lub modyfikacją. Jest on używany w celu utrudnienia hakerom zrozumienia kodu, co pomaga chronić kod źródłowy przed kradzieżą. Zaciemnianie odbywa się poprzez zmianę nazw klas, zmiennych i metod, a także poprzez usuwanie niepotrzebnego lub niechcianego kodu i różnych innych technik exploitów, aby utrudnić uzyskanie oryginalnego kodu Java. Sprawia to, że kod jest trudniejszy do zrozumienia, co utrudnia hakerom identyfikację luk w zabezpieczeniach lub zrozumienie sposobu działania kodu.

### Nadmiarowość
Zaciemnianie Java może być również wykorzystane do zmniejszenia rozmiaru aplikacji. Usuwając niepotrzebny kod i zmieniając nazwy klas, metod i zmiennych, można znacznie zmniejszyć rozmiar aplikacji. Może to być korzystne dla aplikacji, które muszą być dystrybuowane w sieci, ponieważ może skrócić czas pobierania i poprawić wydajność aplikacji.

## Rodzaje znanych technik zaciemniania

### Control flow obfuscation
Zaciemnianie przepływu sterowania w Javie to technika wykorzystywana do ukrywania struktury kodu programu i utrudniania jego zrozumienia. Jego działanie polega na zmianie przepływu sterowania programu, czyli kolejności wykonywania instrukcji. Odbywa się to poprzez zmianę kolejności instrukcji, dodanie nadmiarowych instrukcji i wprowadzenie dodatkowych poziomów przepływu sterowania. Na przykład pętla może zostać zastąpiona instrukcją rozgałęzienia, która przeskakuje do innej części kodu, lub funkcja może zostać zastąpiona zagnieżdżonym zestawem funkcji, które muszą być wykonywane w kolejności. Co więcej, zaciemnianie przepływu sterowania może utrudnić zrozumienie sposobu działania kodu, a także może utrudnić inżynierię wsteczną. Pomaga to również chronić przed ingerencją w kod, ponieważ utrudnia wstrzyknięcie złośliwego kodu do programu.

### Szyfrowanie Ciągów i Liczb
Szyfrowanie liczb i ciągów znaków jest rodzajem zaciemniania używanym w programowaniu w języku Java. Szyfrowanie liczb odnosi się do procesu kodowania liczb w taki sposób, że nie można ich zobaczyć w postaci zwykłego tekstu. This is done by transforming the numbers into a different form, such as binary or hexadecimal, or by using a key to encrypt the numbers. This makes it difficult for someone to decrypt the numbers and gain access to the code. String encryption is similar to number encryption, but it is used to protect strings of text. This is done by transforming the characters in the string into a different form, such as a base64 encoding, or by using a key to encrypt the string. This makes it difficult for someone to decrypt the string and understand its contents.

## Evaluating Quality

Making sure that an obfuscator produces a high quality output after applying obfuscation transformers is essential. At Skidfuscator, we assess various factors into what can affect the quality of obfuscated java code.

### Code size and complexity
The size and complexity of the obfuscated code are essential factors to consider when evaluating the quality of obfuscated Java code. Obfuscation should not significantly increase the size of the code, as this can lead to performance issues and potential bugs. At Skidfuscator, we aim to make your code as obscure as possible without significantly enlarging it whilst maintaining maximum security.

### Security
Security is a critical factor in evaluating the quality of obfuscated Java code. The obfuscation technique in question should be effective in protecting the code from reverse engineering attempts. This can be evaluated by analyzing the code's resistance to reverse engineering tools, such as decompilers and disassemblers.

### Performance
The obfuscated code's performance is another crucial factor in evaluating its quality. Obfuscation should not significantly impact the code's execution time or memory usage. It is also important to note that the obfuscated code should not introduce any new bugs or errors that could affect the code's overall performance. Any performance issues introduced by the obfuscation technique should be identified and addressed.

### Summary

Overall, the quality of obfuscated Java code can be evaluated based on several factors, including code size and complexity, security, maintainability, and performance. Obfuscation should not significantly impact any of these factors, and any issues introduced by the obfuscation technique should be identified and addressed promptly.
