## Cifratura Annotazione

Il trasformatore di crittografia annotazione trasforma ogni stringa e intero contenuto nelle annotazioni in una chiamata di metodo specifica, con lo scopo di nasconderla in runtime. Questo può essere pratico per URL non sensibili, chiavi private, ecc...

::: warning
Non dovresti fidarti del cliente come base. Non fare affidamento sulla crittografia delle stringhe come unica protezione per il vostro software. Per impostazione predefinita, dovresti presumere che un ingegnere inverso abbastanza talentuoso possa avere accesso a questi con abbastanza tempo e pazienza.
:::


## Configurazione

```js
stringAnnotationEncryption {
    enabled: true
    esenzione: []
}

intAnnotationEncryption {
    enabled: true
    esenzione: []
}
```

## Esempi

### Unofuscato

```java
@SecretAnnotation(secret = "Super secret", secret2 = 1337)
public class Fancy {
    public String getSecret() {
        return this. etClass().getAnnotation(SecretAnnotation. lass). ecret();
    }

    public int getSecre2t() {
        return this. etClass().getAnnotation(SecretAnnotation.class).secret2();
    }
}
```

### Offuscato

```java @SecretAnnotation(secret = "oifjaioejaifjea9è!efèaefFEf==", secret2 = 0x9FE7FE7F) public class Fancy { public String getSecret() { /* [...] */ return this.aofheoafo(this.getClass().getAnnotation(SecretAnnotation.class).secret(), n ^ 0x997AF8F); }

    public int getSecre2t() {
        /* [...] */
        return this.getClass().getAnnotation(SecretAnnotation.class).secret2() ^ n ^ 0x90AF9F7;
    }
    
    /* [...]*/
}```
