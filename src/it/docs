## Eccezioni Di Flusso

Flow Exception è una trasformazione di offuscamento che aggiunge ulteriori livelli di sicurezza al tuo codice Java per rendere più difficile per i decompilatori l'output di codice Java valido. Lo fa alterando il flusso di controllo e introducendo il codice di caduta di eccezione in un modo che complica la logica senza modificare la funzionalità del programma.

Ad alto livello, il trasformatore lavora nel modo seguente:
- In primo luogo, il trasformatore esamina i metodi nel codice e salta i metodi astratti, i metodi di init e quelli senza codice per evitare problemi di compatibilità.
- Poi, il trasformatore determina quindi la strategia di offuscamento appropriata (debole, buono o aggressivo) in base alle impostazioni di configurazione. Ogni strategia offre un diverso livello di offuscamento e impatti quanto spesso viene inserito un codice correlato alle eccezioni.
- Una volta che tale è fatto, dor ogni blocco nel grafico del flusso di controllo, il trasformatore verifica se dovrebbe essere esente da offuscata. Salta blocchi vuoti, blocchi proxy e blocchi sensibili alle eccezioni. Se un blocco è ammissibile all'offuscamento, il trasformatore decide se applicare l'offuscamento sulla base della strategia prescelta.
- Quando applicato, il trasformatore genera un seme unico e utilizza l'hashing per fissare il predicato opaco. Poi inserisce un falso salto condizionale a una dichiarazione di lancio, causando il flusso di caduta.
- In alcuni casi, il trasformatore può aggiungere un ulteriore strato di offuscamento inserendo una dichiarazione secondaria di salto condizionale sia all'inizio che a caso nel blocco.

## Configurazione

Ci sono tre modalità disponibili per questo trasformatore specifico:
- `WEAK`: Se è stato eseguito in precedenza, eseguire un booleano casuale, se l'ultima non è stata, eseguire (75% tasso medio di inserimento)
- `GOOD`: Esegui sempre una volta (100% tasso medio di inserimento)
- `AGGRESSIVE`: Eseguire sempre due volte (tasso di inserimento medio del 200%)

```js
flowException {
    enabled: true
    strength: AGGRESSIVE // Può essere 'WEAK', 'GOOD' or 'AGGRESSIVE'
    exempt: []
}
```

## Esempi

#### Unofuscato
```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}
/*[...]*/
```

#### Offuscato
```java
public static void main(String[] args) {
    /*[...]*/
    while (true) {
        if (n ^ 0x8AF8EF8F == 0xA88FFA) {
            break;
        }

        n = n ^ 0x28847D;
        int number = callNumber();

        if (n ^ 0xAA9F8FFD == 0x989F7AF) {
            break;
        }

        throw new IllegalStateException();
    }

    /*[...]*/
}
/*[...]*/
```