## Cifratura Stringa

Il trasformatore di crittografia stringa trasforma ogni stringa in una chiamata di metodo specifica, con lo scopo di nascondere in runtime. Questo può essere pratico per URL non sensibili, chiavi private, ecc...

::: warning
Non dovresti fidarti del cliente come base. Non fare affidamento sulla crittografia delle stringhe come unica protezione per il vostro software. Per impostazione predefinita, dovresti presumere che un ingegnere inverso abbastanza talentuoso possa avere accesso a questi con abbastanza tempo e pazienza.
:::


## Configurazione

Attualmente ci sono due modalità per la cifratura String: `STANDARD` e `POLYMORPHIC`

```js
stringEncryption {
    enabled: true
    type: POLYMORPHIC
    exempt: []
}
```

## Esempi

### Unofuscato

```java
System.out.println("Ciao mondo");
```

### Standard

```java
System.out.println(superDuperMethod("\u2be6\uabec\uebfe\uebfe\uabe0\uabf7\ue7f1", n ^ 0x9F878R));
```

### Polimorfico
```java
StringBuilder string = new StringBuilder("\u2be6\uabec\uebfe\uebfe\uabe0\uabf7\ue7f1\uabe0\u6bfa\uebfe\uabee\uabf5");
for (int a=0, b, c; a < string.length(); a++) {
    b = string.charAt(a);
    b = (((b & 0xffff) << 0x6) | (b >> 0xa)) & 0xffff;
    c = ((b >> 0x0) ^ (b >> 0x7)) & ((1 << 0x4) - 1);
    b ^= (c << 0x0) | (c << 0x7);
    b ^= 0x600f ^ n;
    b -= 0x2aa2 ^ n;
    b += 0x25b0 ^ n;
    b ^= 0x9852 ^ n;
    string.setCharAt(a, (char) b);
}
System.out.println(string)
```