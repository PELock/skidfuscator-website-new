## Contorno

La delimitazione si riferisce al processo di estrazione del codice da un metodo e di collocarlo in un metodo separato e autonomo. Questo viene spesso fatto come un modo per migliorare la leggibilità e la mantenibilità del codice, in quanto può rendere più facile capire che cosa un metodo sta facendo suddividendolo in più piccoli pezzi di codice più mirati.

Il disegno può anche essere usato come una forma di offuscamento del codice, in quanto può rendere più difficile per qualcuno che cerca di invertire l'ingegnere o capire il codice per vedere il flusso complessivo e la struttura del programma. Spezzando il codice in pezzi più piccoli e separandolo in diversi metodi, può essere una procedura molto più dura per qualcuno per capire le relazioni tra le diverse parti del flusso e come si adattano insieme per svolgere una particolare funzione.

![Illustrazione del grafico](https://i.imgur.com/2HMq0a4.png)

La cosa fantastica di delineare è: non è *tecnicamente* reversibile! Per essere in grado di tornare a uno stato originale di una buona offuscazione contorno, un deobfuscatore *deve fare inlining*, che è euristico e *non* garantisce che l'output sia sempre semanticamente corretto con il codice sorgente originale. Inoltre, questo richiede al deobfuscator di manomettere con variabili e altre varie forme di manipolazione sensibile bytecode che tutti possono portare a frame ed eccezioni di calcolo.

Nel complesso, delineare offuscamento è abbastanza ordinato :)

::: warning
Il trasformatore del contorno è ancora molto presto in sviluppo. A causa di come funziona il verificatore Java, non tutti gli scenari possono essere verificati correttamente, il che può portare ad alcuni problemi di compilazione. Si prega di utilizzare a proprio rischio e, se vi sono problemi, si prega di segnalarle.

Nota per sé: Odio i fotogrammi dello stack
:::

## Configurazione

```js
outliner {
     enabled: true
     exempt: []
}
```

## Esempi

#### Unofuscato

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Offuscato
```java
public static void main(String[] args) {
    step1_AF8FZE8EF7Z89F();
    /*[...]*/
}

static void step1_AF8FZE8EF7Z89F() {
    int number = callNumber();
}


static int callNumber() {
    return 1;
}
```


