
# Настройка

Здесь вы узнаете что из себя представляет конфигурация. Будьте уверены, что сможете уловить все детали своим зорким глазом. Если у вас возникнут некоторые проблемы, пожалуйста, свяжитесь с поддержкой. Премиум пользователи могут получить бесплатную услугу по настройке от нашей команды.

## Основная часть конфигурации

Конфигурация основана на [lightbend конфиге](https://github.com/lightbend/config). Это означает, что мы поддерживаем 3 формата: Java Properties, JSON и HOCON.

Мы **настоятельно рекомендуем использовать HOCON** как наиболее простой, элегантный и многосторонний способ, лёгкий в использовании. Посмотрите приложенный конфиг по умолчанию:

```javascript
exempt: []

libs: []

stringEncryption {
  type: STANDARD
  enabled: true
  exempt: []
}

numberEncryption {
  enabled: true
  exempt: []
}

intAnnotationEncryption {
  enabled: true
  exempt: []
}

stringAnnotationEncryption {
  enabled: true
  exempt: []
}

exceptionReturn {
  enabled: true
  exempt: []
}

flowCondition {
  enabled: true
  exempt: []
}

flowException {
  enabled: true
  strength: AGGRESSIVE
  exempt: []
}

flowRange {
  enabled: true
  exempt: []
}

flowFactoryMaker {
  enabled: true
  exempt: []
}

flowSwitch {
  enabled: true
  exempt: []
}

outliner {
  enabled: true
  exempt: []
}

ahegao {
  enabled: true
  exempt: []
}

native: {
  enabled: false
  exempt: []
}

driver: {
  enabled: false
}

reference {
  enabled: false
}

fileCrasher: {
  enabled: false
}

classRenamer {
  enabled: false
  type: CUSTOM
  prefix: "skido/"
  chars: [
    "K"
    "oO",
    "o0"
  ]
  depth: 3
}

methodRenamer {
  enabled: false
  type: CUSTOM
  chars: [
    "K"
    "oO",
    "o0"
  ]
  depth: 3
}

fieldRenamer {
  enabled: false
  type: ALPHABETICAL
}
```

## Исключения

Использование исключений идентично тому, как это было реализовано в старой системе. Чтобы узнать больше об исключениях, следуйте на [эту страницу](../exclusion.md)

::: предупреждение 
Java считывает строку, удаляя обратный слэш. Это означает, что вы ОБЯЗАНЫ писать дважды обратный слэш
:::

### Исключение класса

Сначала, чтобы исключить какой-то класс, вам необходимо использовать исключение класса по регулярному выражению (regex):
```js
class{^my\/class}
```

Чтобы установить это в конфигурации, вы должны передать его как строку.


```js
exempt: [
    "class{^my\\/class}"
]
```

### Исключение метода

Сначала, чтобы исключить какой-то метод, вам необходимо использовать исключение метода класса:
```js
method{^myMethod}
```

Чтобы установить это в конфигурации, вы должны передать его как строку.

```js
exempt: [
    "method{^myMethod}"
]
```

### Исключение метода в определённом классе

Просто закрепим выше сказанное, чтобы исключить метод и класс мы должны сделать следующее:
```js
class{^my\/class}
method{^myMethod}
```

Теперь, чтобы исключить метод ВНУТРИ какого-то класса, всё что нам нужно, это объединить всё в одну строчку:

```js
class{^my\/class} method{^myMethod}
```

В конфиге это будет выглядеть так:

```js
exempt: [
    "class{^my\/class} method{^myMethod}"
]
```

## Библиотеки

Библиотеки - это важный аспект вычисления classpath'а и обеспечения полной безопасности вашего приложения. Здесь вы должны предоставить корректный Java аргумент пути как строку

Ниже можно увидеть код реализации:
```java
public File[] getLibs() {
    return this.getStringList("libraries", Collections.emptyList())
                .stream()
                .map(File::new)
                .distinct()
                .toArray(File[]::new);
}
```

Ниже можно увидеть несколько правильных java путей:
```
C:\test.jar
test.jar
./test.jar
/Home/test.jar
```

В конфиге это будет выглядеть так:

```js
libraries [
    "C:\\test.jar",
    "test.jar",
    "./test.jar",
    "/Home/test.jar"
]
```

## Драйвер

Драйвер - это упрочняющая часто Skidfuscator. Эта особенность зарезервирована для премиума. В двух словах, для обфускации создается и компилируется новый драйвер для следующих архитектур:

| Операционная система | Поддерживаемые архитектуры |
| -------------------- | -------------------------- |
| Windows              | x64_86                     |
| MacOS                | x64_86, AARCH64 (ARM)      |
| Linux                | x64_86 (AMD64)             |

To disable this feature (:warning: this significantly decreases obfuscation strength), you must toggle the boolean:

```js
driver: false
```


## Transformers

You can individually enable/disable each transformer.


#### String Encryption

The string encryption transformer transforms every string into a specific method call, with the purpose of hiding it in runtime. This can be practical for non-sensitive URLs, private keys, etc...

::: warning
You should not trust the client as a basis. Please do not rely on String encryption as the sole protection for your software. By default, you should assume that a talented enough reverse-engineer could gain access to these with enough time and patience.
:::

There are currently two modes for String encryption: `STANDARD` and `POLYMORPHIC`

#### Number Encryption

The number encryption transformer encrypts any integer-based numeral to be hidden. This is perfect for uglifying the code in general and making it more of a hardship for reverse-engineers to obtain a clean source code. This furthermore reinforces any boolean-based conditionals.


#### 