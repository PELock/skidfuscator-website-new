import{_ as n,W as a,X as s,a0 as e}from"./framework-a6fc1c2a.js";const o={},t=e(`<h2 id="number-encryption" tabindex="-1"><a class="header-anchor" href="#number-encryption" aria-hidden="true">#</a> Number Encryption</h2><p>The number encryption transformer encrypts any integer-based numeral to be hidden. This is perfect for uglifying the code in general and making it more of a hardship for reverse-engineers to obtain a clean source code. This furthermore reinforces any boolean-based conditionals.</p><p>The number encryption relies on the GEN3 flow obfuscation and may, in decompiled output, show as follows</p><h4 id="unobfuscated" tabindex="-1"><a class="header-anchor" href="#unobfuscated" aria-hidden="true">#</a> Unobfuscated</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="obfuscated" tabindex="-1"><a class="header-anchor" href="#obfuscated" aria-hidden="true">#</a> Obfuscated</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">0xA0290233</span> <span class="token operator">^</span> n<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">+</span> <span class="token number">0x92083838</span> <span class="token operator">^</span> n <span class="token operator">+</span> <span class="token number">0x92083839</span> <span class="token operator">^</span> n <span class="token operator">+</span> <span class="token number">0x92083840</span> <span class="token operator">^</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p=[t];function r(c,i){return a(),s("div",null,p)}const u=n(o,[["render",r],["__file","numberencryption.html.vue"]]);export{u as default};
